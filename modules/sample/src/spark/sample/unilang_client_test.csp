#SPARK Cache file - DO NOT EDIT
file: sample.unilang_client_test/ca984c5725e162d3f1aa456e7d3bad1b
sourcehash: 1a27d93b62d58afe76ed139f1f83656e
requires: spark.lang.builtin/2c8e888e2fec072b4140babad83ff2be
cspark.internal.parse.pickleable_object
_constructObject1
p2
(cspark.internal.parse.processing
FileSPU
p3
S'sample.unilang_client_test'
p4
(lp5
(g2
(cspark.internal.parse.expr
ExprStructureColon
p7
I1
I36
(g2
(cspark.internal.parse.expr
ExprSymbol
p9
I10
I36
cspark.internal.parse.values
__Symbol
p11
(S'sample.unilang_client_test'
p12
tp13
Rp10
S'q'
p14
Ntp15
Rp8
tp16
S'1'
p17
g11
(S'package:'
p19
tp20
Rp18
g11
(S'spark.lang.builtin.package:'
p22
tp23
Rp21
tp24
Rp6
g2
(g7
I38
I77
(g2
(g9
I50
I66
g11
(S'spark.io.unilang'
p28
tp29
Rp27
g14
Ntp30
Rp26
g2
(g9
I67
I77
g11
(S'queryAgent'
p33
tp34
Rp32
S'j'
p35
g11
(S'sample.unilang_client_test.queryAgent'
p37
tp38
Rp36
tp39
Rp31
tp40
g17
g11
(S'importfrom:'
p42
tp43
Rp41
g11
(S'spark.lang.builtin.importfrom:'
p45
tp46
Rp44
tp47
Rp25
g2
(g7
I78
I112
(g2
(g9
I90
I107
g11
(S'spark.lang.string'
p51
tp52
Rp50
g14
Ntp53
Rp49
g2
(g9
I108
I112
g11
(S'chop'
p56
tp57
Rp55
g35
g11
(S'sample.unilang_client_test.chop'
p59
tp60
Rp58
tp61
Rp54
tp62
g17
g41
g44
tp63
Rp48
g2
(cspark.internal.parse.expr
ExprStructureBrace
p65
I114
I141
(g2
(cspark.internal.parse.expr
ExprStructureOrdinary
p67
I125
I140
(g2
(cspark.internal.parse.expr
ExprLocalVariable
p69
I132
I139
cspark.internal.parse.values
__Variable
p71
(S'$string'
p72
tp73
Rp70
Ntp74
Rp68
tp75
S'D'
p76
g11
(S'start'
p78
tp79
Rp77
g11
(S'sample.unilang_client_test.start'
p81
tp82
Rp80
tp83
Rp66
tp84
g17
g11
(S'defaction{}'
p86
tp87
Rp85
g11
(S'spark.lang.builtin.defaction{}'
p89
tp90
Rp88
(dp91
g4
(dp92
tp93
Rp64
g2
(g65
I142
I174
(g2
(g67
I153
I173
(g2
(g69
I167
I172
g71
(S'$data'
p98
tp99
Rp97
Ntp100
Rp96
tp101
g76
g11
(S'inspect_data'
p103
tp104
Rp102
g11
(S'sample.unilang_client_test.inspect_data'
p106
tp107
Rp105
tp108
Rp95
tp109
g17
g85
g88
(dp110
g4
(dp111
tp112
Rp94
g2
(g65
I175
I202
(g2
(g67
I189
I201
(g2
(g69
I195
I200
g71
(S'$test'
p117
tp118
Rp116
Ntp119
Rp115
tp120
g76
g11
(S'Test'
p122
tp123
Rp121
g11
(S'sample.unilang_client_test.Test'
p125
tp126
Rp124
tp127
Rp114
tp128
g17
g11
(S'defpredicate{}'
p130
tp131
Rp129
g11
(S'spark.lang.builtin.defpredicate{}'
p133
tp134
Rp132
(dp135
g4
(dp136
tp137
Rp113
g2
(g65
I203
I241
(g2
(g67
I217
I240
(g2
(g69
I234
I239
g97
Ntp141
Rp140
tp142
g76
g11
(S'Data_To_Inspect'
p144
tp145
Rp143
g11
(S'sample.unilang_client_test.Data_To_Inspect'
p147
tp148
Rp146
tp149
Rp139
tp150
g17
g129
g132
(dp151
g4
(dp152
tp153
Rp138
g2
(g65
I242
I294
(g2
(g67
I256
I293
(g2
(g69
I281
I286
g116
Ntp157
Rp156
g2
(g69
I287
I292
g97
Ntp159
Rp158
tp160
g76
g11
(S'Preconditions_Satisfied'
p162
tp163
Rp161
g11
(S'sample.unilang_client_test.Preconditions_Satisfied'
p165
tp166
Rp164
tp167
Rp155
tp168
g17
g129
g132
(dp169
g4
(dp170
tp171
Rp154
g2
(g65
I296
I441
(g2
(g9
I310
I315
g11
(S'Start'
p175
tp176
Rp174
g35
g11
(S'sample.unilang_client_test.Start'
p178
tp179
Rp177
tp180
Rp173
g2
(g7
I318
I345
(g2
(cspark.internal.parse.expr
ExprList
p183
I323
I345
(g2
(g7
I324
I344
(g2
(g67
I328
I344
(g2
(g67
I335
I343
(g2
(g69
I336
I343
g70
S'-'
p188
tp189
Rp187
tp190
S'g'
p191
g11
(S'+#'
p193
tp194
Rp192
g11
(S'spark.lang.builtin.+#'
p196
tp197
Rp195
tp198
Rp186
tp199
S'f'
p200
g77
g80
tp201
Rp185
tp202
S'c'
p203
g11
(S'do:'
p205
tp206
Rp204
g11
(S'spark.lang.builtin.do:'
p208
tp209
Rp207
tp210
Rp184
tp211
S'l'
p212
tp213
Rp182
tp214
Ng11
(S'cue:'
p216
tp217
Rp215
S'('
p218
tp219
Rp181
g2
(g7
I348
I385
(g2
(g67
I362
I385
(g2
(g69
I379
I384
g97
g188
tp223
Rp222
tp224
S's'
p225
g143
g146
tp226
Rp221
tp227
Ng11
(S'precondition:'
p229
tp230
Rp228
g218
tp231
Rp220
g2
(g7
I388
I436
(g2
(g183
I394
I436
(g2
(g7
I395
I431
(g2
(g183
I403
I431
(g2
(g7
I404
I430
(g2
(g67
I408
I430
(g2
(g69
I422
I429
g70
S'+'
p239
tp240
Rp238
tp241
S'd'
p242
g102
g105
tp243
Rp237
tp244
S'x'
p245
g204
g207
tp246
Rp236
tp247
g245
tp248
Rp235
tp249
g245
g11
(S'seq:'
p251
tp252
Rp250
g11
(S'spark.lang.builtin.seq:'
p254
tp255
Rp253
tp256
Rp234
tp257
g245
tp258
Rp233
tp259
Ng11
(S'body:'
p261
tp262
Rp260
g218
tp263
Rp232
tp264
g17
g11
(S'defprocedure{}'
p266
tp267
Rp265
g11
(S'spark.lang.builtin.defprocedure{}'
p269
tp270
Rp268
(dp271
g4
(dp272
(g97
Ng70
Nutp273
Rp172
g2
(g65
I443
I616
(g2
(g9
I457
I469
g11
(S'Inspect_Data'
p277
tp278
Rp276
g35
g11
(S'sample.unilang_client_test.Inspect_Data'
p280
tp281
Rp279
tp282
Rp275
g2
(g7
I472
I506
(g2
(g183
I477
I506
(g2
(g7
I478
I505
(g2
(g67
I482
I505
(g2
(g67
I496
I504
(g2
(g69
I497
I504
g70
g188
tp289
Rp288
tp290
g191
g192
g195
tp291
Rp287
tp292
g200
g102
g105
tp293
Rp286
tp294
g203
g204
g207
tp295
Rp285
tp296
g212
tp297
Rp284
tp298
Ng215
g218
tp299
Rp283
g2
(g7
I509
I529
(g2
(g67
I523
I529
(tp302
g225
g11
(S'True'
p304
tp305
Rp303
g11
(S'spark.lang.builtin.True'
p307
tp308
Rp306
tp309
Rp301
tp310
Ng228
g218
tp311
Rp300
g2
(g7
I532
I611
(g2
(g183
I538
I611
(g2
(g7
I539
I606
(g2
(g183
I547
I606
(g2
(g7
I548
I605
(g2
(g67
I552
I605
(g2
(cspark.internal.parse.expr
ExprString
p319
I559
I574
S'Result is: %s'
p320
S'+'
p321
tp322
Rp318
g2
(g183
I575
I604
(g2
(g67
I576
I603
(g2
(g319
I588
I594
S'Echo'
p326
g321
tp327
Rp325
g2
(g69
I595
I602
g70
g321
tp329
Rp328
tp330
g321
g32
g11
(S'spark.io.unilang.queryAgent'
p332
tp333
Rp331
tp334
Rp324
tp335
g321
tp336
Rp323
tp337
g242
g11
(S'print'
p339
tp340
Rp338
g11
(S'spark.lang.builtin.print'
p342
tp343
Rp341
tp344
Rp317
tp345
g245
g204
g207
tp346
Rp316
tp347
g245
tp348
Rp315
tp349
g245
g250
g253
tp350
Rp314
tp351
g245
tp352
Rp313
tp353
Ng260
g218
tp354
Rp312
tp355
g17
g265
g268
(dp356
g4
(dp357
g70
Nstp358
Rp274
g2
(g67
I619
I655
(g2
(g319
I636
I654
S'Andrew Dougherty'
p361
g321
tp362
Rp360
tp363
S'u'
p364
g143
g146
tp365
Rp359
g2
(g67
I657
I676
(g2
(g319
I663
I675
S'FirstnameP'
p368
g321
tp369
Rp367
tp370
g364
g121
g124
tp371
Rp366
g2
(g67
I677
I695
(g2
(g319
I683
I694
S'LastnameP'
p374
g321
tp375
Rp373
tp376
g364
g121
g124
tp377
Rp372
g2
(g67
I696
I717
(g2
(g319
I702
I716
S'NamedEntityP'
p380
g321
tp381
Rp379
tp382
g364
g121
g124
tp383
Rp378
eS'sample.unilang_client_test'
p384
N(dp385
(S'queryAgent'
p386
g331
S'Test'
p387
g2
(cspark.internal.parse.fip
Decl
p389
g124
(lp390
(g2
(cspark.internal.parse.mode
Mode
p392
S's=-'
p393
(lp394
(lp395
tp396
Rp391
g2
(g392
S'r=-'
p398
(lp399
(lp400
tp401
Rp397
g2
(g392
S'u=+'
p403
(lp404
(lp405
tp406
Rp402
g2
(g392
S'a=-'
p408
(lp409
(lp410
tp411
Rp407
g2
(g392
S'f=g'
p413
(lp414
(lp415
tp416
Rp412
eNNtp417
Rp388
S'Start'
p418
g2
(g389
g177
(lp420
(g2
(g392
S' ='
p422
(lp423
(lp424
tp425
Rp421
eNNtp426
Rp419
S'chop'
p427
g11
(S'spark.lang.string.chop'
p429
tp430
Rp428
S'start'
p431
g2
(g389
g80
(lp433
(g2
(g392
S'd=-'
p435
(lp436
(lp437
tp438
Rp434
g2
(g392
S'f=g'
p440
(lp441
(lp442
tp443
Rp439
eNNtp444
Rp432
S'Preconditions_Satisfied'
p445
g2
(g389
g164
(lp447
(g2
(g392
S's=--'
p449
(lp450
(lp451
tp452
Rp448
g2
(g392
S'r=--'
p454
(lp455
(lp456
tp457
Rp453
g2
(g392
S'u=++'
p459
(lp460
(lp461
tp462
Rp458
g2
(g392
S'a=--'
p464
(lp465
(lp466
tp467
Rp463
g2
(g392
S'f=gg'
p469
(lp470
(lp471
tp472
Rp468
eNNtp473
Rp446
S'Data_To_Inspect'
p474
g2
(g389
g146
(lp476
(g2
(g392
S's=-'
p478
(lp479
(lp480
tp481
Rp477
g2
(g392
S'r=-'
p483
(lp484
(lp485
tp486
Rp482
g2
(g392
S'u=+'
p488
(lp489
(lp490
tp491
Rp487
g2
(g392
S'a=-'
p493
(lp494
(lp495
tp496
Rp492
g2
(g392
S'f=g'
p498
(lp499
(lp500
tp501
Rp497
eNNtp502
Rp475
S'Inspect_Data'
p503
g2
(g389
g279
(lp505
(g2
(g392
g422
(lp507
(lp508
tp509
Rp506
eNNtp510
Rp504
S'inspect_data'
p511
g2
(g389
g105
(lp513
(g2
(g392
S'd=-'
p515
(lp516
(lp517
tp518
Rp514
g2
(g392
S'f=g'
p520
(lp521
(lp522
tp523
Rp519
eNNtp524
Rp512
uccopy_reg
_reconstructor
p526
(csets
Set
p527
c__builtin__
object
p528
Ntp529
Rp525
((dp530
S'spark.lang.builtin'
p531
I01
stp532
bg526
(g527
g528
Ntp534
Rp533
((dp535
tp536
b(dp537
(g86
g2
(g389
g88
(lp539
(g2
(g392
S'1=D:+++++q'
p541
(lp542
(S'imp:'
p543
S'doc:'
p544
S'properties:'
p545
S'features:'
p546
S'argtypes:'
p547
S'roles:'
p548
e(lp549
tp550
Rp540
eNS'spark.lang.builtin.DefactionBrace'
p551
tp552
Rp538
g175
g419
g56
g428
g78
g432
g162
g446
g304
g2
(g389
g306
(lp554
(g2
(g392
S's='
p556
(lp557
(lp558
tp559
Rp555
eNS'spark.lang.builtin.PredTrue'
p560
tp561
Rp553
g130
g2
(g389
g132
(lp563
(g2
(g392
S'1=D:+++++'
p565
(lp566
(S'imp:'
p567
S'doc:'
p568
S'properties:'
p569
S'argtypes:'
p570
S'static:'
p571
e(lp572
tp573
Rp564
eNS'spark.lang.builtin.DefpredicateBrace'
p574
tp575
Rp562
g205
g2
(g389
g207
(lp577
(g2
(g392
S'x=d'
p579
(lp580
(lp581
tp582
Rp578
g2
(g392
S'c=f'
p584
(lp585
(lp586
tp587
Rp583
eNS'spark.internal.repr.taskexpr.DoColon'
p588
tp589
Rp576
g251
g2
(g389
g253
(lp591
(g2
(g392
S'x=*x'
p593
(lp594
(lp595
tp596
Rp592
eS'spark.internal.parse.combiner.SERIAL'
p597
S'spark.internal.repr.taskexpr.SeqColon'
p598
tp599
Rp590
g266
g2
(g389
g268
(lp601
(g2
(g392
S'1=j:lsx+++q'
p603
(lp604
(S'cue:'
p605
S'precondition:'
p606
S'body:'
p607
S'doc:'
p608
S'properties:'
p609
S'features:'
p610
S'roles:'
p611
e(lp612
(S'cue:'
p613
S'body:'
p614
etp615
Rp602
g2
(g392
S'L=L:RRRLLLL'
p617
(lp618
(g605
g606
g607
g608
g609
g610
g611
e(lp619
(g613
g614
etp620
Rp616
eS'spark.internal.parse.combiner.DEFPROCEDURE'
p621
S'spark.lang.builtin.DefprocedureBrace'
p622
tp623
Rp600
g33
g331
g339
g2
(g389
g341
(lp625
(g2
(g392
S'd=++'
p627
(lp628
(lp629
tp630
Rp626
g2
(g392
S'f=gg'
p632
(lp633
(lp634
tp635
Rp631
eNNtp636
Rp624
g19
g2
(g389
g21
(lp638
(g2
(g392
S'1=q'
p640
(lp641
(lp642
tp643
Rp639
eNS'spark.lang.builtin.ModuleColon'
p644
tp645
Rp637
g122
g388
g193
g2
(g389
g195
(lp647
(g2
(g392
S'g=-'
p649
(lp650
(lp651
tp652
Rp648
eNS'spark.lang.builtin.PlusPrefix'
p653
tp654
Rp646
g42
g2
(g389
g44
(lp656
(g2
(g392
S'1=q*j'
p658
(lp659
(lp660
tp661
Rp657
eNS'spark.lang.builtin.ImportfromColon'
p662
tp663
Rp655
g144
g475
g277
g504
g103
g512
ug526
(g527
g528
Ntp665
Rp664
((dp666
g531
I01
stp667
bg526
(g527
g528
Ntp669
Rp668
((dp670
(S'spark.lang.string'
p671
I01
S'spark.io.unilang'
p672
I01
utp673
bg526
(csets
ImmutableSet
p675
g528
Ntp676
Rp674
((dp677
Ntp678
b(lp679
I25
NNNNNNNS'\npackage: sample.unilang_client_test\n\nimportfrom: spark.io.unilang queryAgent\nimportfrom: spark.lang.string chop\n\n{defaction (start $string)}\n{defaction (inspect_data $data)}\n{defpredicate (Test $test)}\n{defpredicate (Data_To_Inspect $data)}\n{defpredicate (Preconditions_Satisfied $test $data)}\n\n{defprocedure Start\n  cue: [do: (start +$string)]\n  precondition: (Data_To_Inspect $data)\n  body: [seq:\n\t  [do: (inspect_data $string)]\n\t  ] \n  }\n\n{defprocedure Inspect_Data\n  cue: [do: (inspect_data +$string)]\n  precondition: (True)\n  body: [seq:\n\t  [do: (print "Result is: %s" [(queryAgent "Echo" $string)])]\n\t  ] \n  }\n\n\n(Data_To_Inspect "Andrew Dougherty")\n\n(Test "FirstnameP")\n(Test "LastnameP")\n(Test "NamedEntityP")\n'
p680
NNtp681
Rp1
.
# END OF FILE#
