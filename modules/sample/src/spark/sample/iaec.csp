#SPARK Cache file - DO NOT EDIT
file: sample.iaec/484b0afdaea09c5781599d9d857ec9d9
sourcehash: 83d3f70d2c1cdfb880786c375464ae29
requires: spark.lang.builtin/2c8e888e2fec072b4140babad83ff2be
cspark.internal.parse.pickleable_object
_constructObject1
p2
(cspark.internal.parse.processing
FileSPU
p3
S'sample.iaec'
p4
(lp5
(g2
(cspark.internal.parse.expr
ExprStructureBrace
p7
I0
I19
(g2
(cspark.internal.parse.expr
ExprStructureOrdinary
p9
I11
I18
(tp10
S'D'
p11
cspark.internal.parse.values
__Symbol
p13
(S'start'
p14
tp15
Rp12
g13
(S'sample.iaec.start'
p17
tp18
Rp16
tp19
Rp8
tp20
S'1'
p21
g13
(S'defaction{}'
p23
tp24
Rp22
g13
(S'spark.lang.builtin.defaction{}'
p26
tp27
Rp25
(dp28
g4
(dp29
tp30
Rp6
g2
(g7
I20
I52
(g2
(g9
I31
I51
(g2
(cspark.internal.parse.expr
ExprLocalVariable
p34
I45
I50
cspark.internal.parse.values
__Variable
p36
(S'$data'
p37
tp38
Rp35
Ntp39
Rp33
tp40
g11
g13
(S'inspect_data'
p42
tp43
Rp41
g13
(S'sample.iaec.inspect_data'
p45
tp46
Rp44
tp47
Rp32
tp48
g21
g22
g25
(dp49
g4
(dp50
tp51
Rp31
g2
(g7
I53
I80
(g2
(g9
I67
I79
(g2
(g34
I73
I78
g36
(S'$test'
p56
tp57
Rp55
Ntp58
Rp54
tp59
g11
g13
(S'Test'
p61
tp62
Rp60
g13
(S'sample.iaec.Test'
p64
tp65
Rp63
tp66
Rp53
tp67
g21
g13
(S'defpredicate{}'
p69
tp70
Rp68
g13
(S'spark.lang.builtin.defpredicate{}'
p72
tp73
Rp71
(dp74
g4
(dp75
tp76
Rp52
g2
(g7
I81
I119
(g2
(g9
I95
I118
(g2
(g34
I112
I117
g35
Ntp80
Rp79
tp81
g11
g13
(S'Data_To_Inspect'
p83
tp84
Rp82
g13
(S'sample.iaec.Data_To_Inspect'
p86
tp87
Rp85
tp88
Rp78
tp89
g21
g68
g71
(dp90
g4
(dp91
tp92
Rp77
g2
(g7
I120
I172
(g2
(g9
I134
I171
(g2
(g34
I159
I164
g55
Ntp96
Rp95
g2
(g34
I165
I170
g35
Ntp98
Rp97
tp99
g11
g13
(S'Preconditions_Satisfied'
p101
tp102
Rp100
g13
(S'sample.iaec.Preconditions_Satisfied'
p104
tp105
Rp103
tp106
Rp94
tp107
g21
g68
g71
(dp108
g4
(dp109
tp110
Rp93
g2
(g7
I174
I388
(g2
(cspark.internal.parse.expr
ExprSymbol
p113
I188
I193
g13
(S'Start'
p115
tp116
Rp114
S'j'
p117
g13
(S'sample.iaec.Start'
p119
tp120
Rp118
tp121
Rp112
g2
(cspark.internal.parse.expr
ExprStructureColon
p123
I196
I214
(g2
(cspark.internal.parse.expr
ExprList
p125
I201
I214
(g2
(g123
I202
I213
(g2
(g9
I206
I213
(tp128
S'f'
p129
g12
g16
tp130
Rp127
tp131
S'c'
p132
g13
(S'do:'
p134
tp135
Rp133
g13
(S'spark.lang.builtin.do:'
p137
tp138
Rp136
tp139
Rp126
tp140
S'l'
p141
tp142
Rp124
tp143
Ng13
(S'cue:'
p145
tp146
Rp144
S'('
p147
tp148
Rp122
g2
(g123
I217
I254
(g2
(g9
I231
I254
(g2
(g34
I248
I253
g35
S'-'
p152
tp153
Rp151
tp154
S's'
p155
g82
g85
tp156
Rp150
tp157
Ng13
(S'precondition:'
p159
tp160
Rp158
g147
tp161
Rp149
g2
(g123
I257
I383
(g2
(g125
I263
I383
(g2
(g123
I264
I378
(g2
(g125
I352
I378
(g2
(g123
I353
I377
(g2
(g9
I357
I377
(g2
(g34
I371
I376
g35
S'+'
p169
tp170
Rp168
tp171
S'd'
p172
g41
g44
tp173
Rp167
tp174
S'x'
p175
g133
g136
tp176
Rp166
tp177
g175
tp178
Rp165
tp179
g175
g13
(S'seq:'
p181
tp182
Rp180
g13
(S'spark.lang.builtin.seq:'
p184
tp185
Rp183
tp186
Rp164
tp187
g175
tp188
Rp163
tp189
Ng13
(S'body:'
p191
tp192
Rp190
g147
tp193
Rp162
tp194
g21
g13
(S'defprocedure{}'
p196
tp197
Rp195
g13
(S'spark.lang.builtin.defprocedure{}'
p199
tp200
Rp198
(dp201
g4
(dp202
g35
Nstp203
Rp111
g2
(g7
I390
I666
(g2
(g113
I404
I416
g13
(S'Inspect_Data'
p207
tp208
Rp206
g117
g13
(S'sample.iaec.Inspect_Data'
p210
tp211
Rp209
tp212
Rp205
g2
(g123
I419
I451
(g2
(g125
I424
I451
(g2
(g123
I425
I450
(g2
(g9
I429
I450
(g2
(g9
I443
I449
(g2
(g34
I444
I449
g35
g152
tp219
Rp218
tp220
S'g'
p221
g13
(S'+#'
p223
tp224
Rp222
g13
(S'spark.lang.builtin.+#'
p226
tp227
Rp225
tp228
Rp217
tp229
g129
g41
g44
tp230
Rp216
tp231
g132
g133
g136
tp232
Rp215
tp233
g141
tp234
Rp214
tp235
Ng144
g147
tp236
Rp213
g2
(g123
I454
I474
(g2
(g9
I468
I474
(tp239
g155
g13
(S'True'
p241
tp242
Rp240
g13
(S'spark.lang.builtin.True'
p244
tp245
Rp243
tp246
Rp238
tp247
Ng158
g147
tp248
Rp237
g2
(g123
I477
I661
(g2
(g125
I483
I661
(g2
(g123
I484
I656
(g2
(g125
I492
I559
(g2
(g123
I493
I558
(g2
(g9
I497
I558
(g2
(cspark.internal.parse.expr
ExprString
p256
I504
I549
S'Figuring out which tests to run on data: %s'
p257
S'+'
p258
tp259
Rp255
g2
(g125
I550
I557
(g2
(g34
I551
I556
g35
g258
tp262
Rp261
tp263
g258
tp264
Rp260
tp265
g172
g13
(S'print'
p267
tp268
Rp266
g13
(S'spark.lang.builtin.print'
p270
tp271
Rp269
tp272
Rp254
tp273
g175
g133
g136
tp274
Rp253
tp275
g175
tp276
Rp252
g2
(g125
I563
I656
(g2
(g123
I564
I655
(g2
(g125
I572
I579
(g2
(g34
I573
I578
g55
S'v'
p281
tp282
Rp280
tp283
g281
tp284
Rp279
g2
(g9
I580
I592
(g2
(g34
I586
I591
g55
g152
tp287
Rp286
tp288
g155
g60
g63
tp289
Rp285
g2
(g125
I597
I655
(g2
(g123
I598
I606
(tp292
g175
g13
(S'succeed:'
p294
tp295
Rp293
g13
(S'spark.lang.builtin.succeed:'
p297
tp298
Rp296
tp299
Rp291
g2
(g123
I607
I654
(g2
(g9
I617
I654
(g2
(g34
I642
I647
g55
g258
tp303
Rp302
g2
(g34
I648
I653
g35
g258
tp305
Rp304
tp306
S'u'
p307
g100
g103
tp308
Rp301
tp309
g175
g13
(S'conclude:'
p311
tp312
Rp310
g13
(S'spark.lang.builtin.conclude:'
p314
tp315
Rp313
tp316
Rp300
tp317
g175
tp318
Rp290
tp319
g175
g13
(S'forall:'
p321
tp322
Rp320
g13
(S'spark.lang.builtin.forall:'
p324
tp325
Rp323
tp326
Rp278
tp327
g175
tp328
Rp277
tp329
g175
g180
g183
tp330
Rp251
tp331
g175
tp332
Rp250
tp333
Ng190
g147
tp334
Rp249
tp335
g21
g195
g198
(dp336
g4
(dp337
(g55
g278
g35
Nutp338
Rp204
g2
(g9
I669
I705
(g2
(g256
I686
I704
S'Andrew Dougherty'
p341
g258
tp342
Rp340
tp343
g307
g82
g85
tp344
Rp339
g2
(g9
I707
I726
(g2
(g256
I713
I725
S'FirstnameP'
p347
g258
tp348
Rp346
tp349
g307
g60
g63
tp350
Rp345
g2
(g9
I727
I745
(g2
(g256
I733
I744
S'LastnameP'
p353
g258
tp354
Rp352
tp355
g307
g60
g63
tp356
Rp351
g2
(g9
I746
I767
(g2
(g256
I752
I766
S'NamedEntityP'
p359
g258
tp360
Rp358
tp361
g307
g60
g63
tp362
Rp357
eg4
N(dp363
(S'Test'
p364
g2
(cspark.internal.parse.fip
Decl
p366
g63
(lp367
(g2
(cspark.internal.parse.mode
Mode
p369
S's=-'
p370
(lp371
(lp372
tp373
Rp368
g2
(g369
S'r=-'
p375
(lp376
(lp377
tp378
Rp374
g2
(g369
S'u=+'
p380
(lp381
(lp382
tp383
Rp379
g2
(g369
S'a=-'
p385
(lp386
(lp387
tp388
Rp384
g2
(g369
S'f=g'
p390
(lp391
(lp392
tp393
Rp389
eNNtp394
Rp365
S'Start'
p395
g2
(g366
g118
(lp397
(g2
(g369
S' ='
p399
(lp400
(lp401
tp402
Rp398
eNNtp403
Rp396
S'start'
p404
g2
(g366
g16
(lp406
(g2
(g369
S'd='
p408
(lp409
(lp410
tp411
Rp407
g2
(g369
S'f='
p413
(lp414
(lp415
tp416
Rp412
eNNtp417
Rp405
S'Preconditions_Satisfied'
p418
g2
(g366
g103
(lp420
(g2
(g369
S's=--'
p422
(lp423
(lp424
tp425
Rp421
g2
(g369
S'r=--'
p427
(lp428
(lp429
tp430
Rp426
g2
(g369
S'u=++'
p432
(lp433
(lp434
tp435
Rp431
g2
(g369
S'a=--'
p437
(lp438
(lp439
tp440
Rp436
g2
(g369
S'f=gg'
p442
(lp443
(lp444
tp445
Rp441
eNNtp446
Rp419
S'Data_To_Inspect'
p447
g2
(g366
g85
(lp449
(g2
(g369
S's=-'
p451
(lp452
(lp453
tp454
Rp450
g2
(g369
S'r=-'
p456
(lp457
(lp458
tp459
Rp455
g2
(g369
S'u=+'
p461
(lp462
(lp463
tp464
Rp460
g2
(g369
S'a=-'
p466
(lp467
(lp468
tp469
Rp465
g2
(g369
S'f=g'
p471
(lp472
(lp473
tp474
Rp470
eNNtp475
Rp448
S'Inspect_Data'
p476
g2
(g366
g209
(lp478
(g2
(g369
g399
(lp480
(lp481
tp482
Rp479
eNNtp483
Rp477
S'inspect_data'
p484
g2
(g366
g44
(lp486
(g2
(g369
S'd=-'
p488
(lp489
(lp490
tp491
Rp487
g2
(g369
S'f=g'
p493
(lp494
(lp495
tp496
Rp492
eNNtp497
Rp485
uccopy_reg
_reconstructor
p499
(csets
Set
p500
c__builtin__
object
p501
Ntp502
Rp498
((dp503
S'spark.lang.builtin'
p504
I01
stp505
bg499
(g500
g501
Ntp507
Rp506
((dp508
tp509
b(dp510
(g23
g2
(g366
g25
(lp512
(g2
(g369
S'1=D:+++++q'
p514
(lp515
(S'imp:'
p516
S'doc:'
p517
S'properties:'
p518
S'features:'
p519
S'argtypes:'
p520
S'roles:'
p521
e(lp522
tp523
Rp513
eNS'spark.lang.builtin.DefactionBrace'
p524
tp525
Rp511
g115
g396
g14
g405
g101
g419
g241
g2
(g366
g243
(lp527
(g2
(g369
S's='
p529
(lp530
(lp531
tp532
Rp528
eNS'spark.lang.builtin.PredTrue'
p533
tp534
Rp526
g294
g2
(g366
g296
(lp536
(g2
(g369
S'x='
p538
(lp539
(lp540
tp541
Rp537
eNS'spark.internal.repr.taskexpr.SucceedColon'
p542
tp543
Rp535
g69
g2
(g366
g71
(lp545
(g2
(g369
S'1=D:+++++'
p547
(lp548
(S'imp:'
p549
S'doc:'
p550
S'properties:'
p551
S'argtypes:'
p552
S'static:'
p553
e(lp554
tp555
Rp546
eNS'spark.lang.builtin.DefpredicateBrace'
p556
tp557
Rp544
g134
g2
(g366
g136
(lp559
(g2
(g369
S'x=d'
p561
(lp562
(lp563
tp564
Rp560
g2
(g369
S'c=f'
p566
(lp567
(lp568
tp569
Rp565
eNS'spark.internal.repr.taskexpr.DoColon'
p570
tp571
Rp558
g181
g2
(g366
g183
(lp573
(g2
(g369
S'x=*x'
p575
(lp576
(lp577
tp578
Rp574
eS'spark.internal.parse.combiner.SERIAL'
p579
S'spark.internal.repr.taskexpr.SeqColon'
p580
tp581
Rp572
g196
g2
(g366
g198
(lp583
(g2
(g369
S'1=j:lsx+++q'
p585
(lp586
(S'cue:'
p587
S'precondition:'
p588
S'body:'
p589
S'doc:'
p590
S'properties:'
p591
S'features:'
p592
S'roles:'
p593
e(lp594
(S'cue:'
p595
S'body:'
p596
etp597
Rp584
g2
(g369
S'L=L:RRRLLLL'
p599
(lp600
(g587
g588
g589
g590
g591
g592
g593
e(lp601
(g595
g596
etp602
Rp598
eS'spark.internal.parse.combiner.DEFPROCEDURE'
p603
S'spark.lang.builtin.DefprocedureBrace'
p604
tp605
Rp582
g311
g2
(g366
g313
(lp607
(g2
(g369
S'x=u'
p609
(lp610
(lp611
tp612
Rp608
eNS'spark.internal.repr.taskexpr.ConcludeColon'
p613
tp614
Rp606
g267
g2
(g366
g269
(lp616
(g2
(g369
S'd=++'
p618
(lp619
(lp620
tp621
Rp617
g2
(g369
S'f=gg'
p623
(lp624
(lp625
tp626
Rp622
eNNtp627
Rp615
g61
g365
g223
g2
(g366
g225
(lp629
(g2
(g369
S'g=-'
p631
(lp632
(lp633
tp634
Rp630
eNS'spark.lang.builtin.PlusPrefix'
p635
tp636
Rp628
g321
g2
(g366
g323
(lp638
(g2
(g369
S'x=vsx'
p640
(lp641
(lp642
tp643
Rp639
eS'spark.internal.parse.combiner.LOCALS'
p644
S'spark.internal.repr.taskexpr.ForallColon'
p645
tp646
Rp637
g83
g448
g207
g477
g42
g485
ug499
(g500
g501
Ntp648
Rp647
((dp649
g504
I01
stp650
bg499
(g500
g501
Ntp652
Rp651
((dp653
tp654
bg499
(csets
ImmutableSet
p656
g501
Ntp657
Rp655
((dp658
Ntp659
b(lp660
I25
NNNNNNNS'{defaction (start)}\n{defaction (inspect_data $data)}\n{defpredicate (Test $test)}\n{defpredicate (Data_To_Inspect $data)}\n{defpredicate (Preconditions_Satisfied $test $data)}\n\n{defprocedure Start\n  cue: [do: (start)]\n  precondition: (Data_To_Inspect $data)\n  body: [seq:\n          # [do: (print "Figuring out which tests to run on data: %s" [$data])]\n\t  [do: (inspect_data $data)]\n\t  ] \n  }\n\n{defprocedure Inspect_Data\n  cue: [do: (inspect_data +$data)]\n  precondition: (True)\n  body: [seq:\n\t  [do: (print "Figuring out which tests to run on data: %s" [$data])]\n\t  [forall: [$test] (Test $test)\n\t\t  [succeed: conclude: (Preconditions_Satisfied $test $data)]]\n\t  ] \n  }\n\n\n(Data_To_Inspect "Andrew Dougherty")\n\n(Test "FirstnameP")\n(Test "LastnameP")\n(Test "NamedEntityP")\n'
p661
NNtp662
Rp1
.
# END OF FILE#
